;;;; turtle.lisp

;;ATTENTION: the data from turtle should be rounded.
;;eg. (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)

(in-package #:util)

(defun make-turtle () 
  (>> 'coord (>> 'x 0 'y 0 'z 0 'angle 0) 'points '() 'shape 'triangle 'pen "up"))
;;(shape 'triangle) ;'square 'circle
;;(pen "up") ;"down" , "up", and "erase"

(defun goto (a x y &optional (angle nil))
  (>> a `(coord x) x)
  (>> a `(coord y) y)
  (when (not (null angle))
    (>> a `(coord angle) angle)))

(defun forward (a steps &key (color sdl:*black*))
  (let ((x (>> a `(coord x)))
	 (y (>> a `(coord y))))
    (>> a `(coord x) (+ x (* steps (cos (sdl:to-radian (>> a `(coord angle)))))))
    (>> a `(coord y) (+ y (* steps (sin (sdl:to-radian (>> a `(coord angle)))))))
    (when (equal "down" (>> a 'pen))
      (sdl:draw-line-* (round x) (round y) (round (>> a `(coord x))) (round (>> a `(coord y))) :color color))))

(defun fd (a steps &key (color sdl:*black*))
  (forward a steps :color color))

(defun backward (a steps &key (color sdl:*black*))
  (forward a (- steps) :color color))

(defun bk (a steps &key (color sdl:*black*))
  (forward a (- steps) :color color))

(defun left (a degrees)
  (>> a `(coord angle) (+ (>> a `(coord angle)) degrees))
  (when (< (>> a `(coord angle)) 0) (>> a `(coord angle) (+ (>> a `(coord angle)) 360)))
  (when (> (>> a `(coord angle)) 360) (>> a `(coord angle) (- (>> a `(coord angle)) 360))))

(defun right (a degrees)
  (left a (- degrees)))

(defun rt (a degrees)
  (right a degrees))

(defun lt (a degrees)
  (left a degrees))

(defun draw-bezier-polygon (a &key (shape "square-tri") (n0 2) (n1 0.2) (center '(0 0)))
  (>> a 'points '())
  (cond
    ((equal shape "triangle") (triangle a :center center))
    ((equal shape "square") (square a :center center))
    ((equal shape "pentagon") (pentagon a :center center))
    ((equal shape "three-pointed-star") (three-pointed-star a :center center))
    ((equal shape "four-pointed-star") (four-pointed-star a :center center))
    ((equal shape "five-pointed-star-shape") (five-pointed-star-shape a :center center))
    ((equal shape "five-pointed-star") (five-pointed-star a :center center))
    ((equal shape "square-intersec") (square-intersec a :center center))
    ((equal shape "hourglass") (hourglass a :center center))
    ((equal shape "square-tri") (square-tri a :center center))
    (t (triangle a :center center)))
  (show "shape: {}" shape)
  (let ((ps (mapcar #'(lambda (x) (list (round-float (car x) 3) (round-float (second x) 3))) (>> a 'points)))) (show "points: {} n0: {} n1: {}" ps n0 n1))
  (let ((bezier-points (get-bezier-points :points (>> a 'points) :n0 n0 :n1 n1)))
    (sdl:with-color (a-col (sdl:color :r 0 :g 0 :b 0))
      (dolist (p bezier-points) 
	(sdl:draw-bezier (list
			   (sdl:point :x (round (car (car p))) :y (round (second (car p))))
			   (sdl:point :x (round (car (cadr p))) :y (round (second (cadr p))))
			   (sdl:point :x (round (car (caddr p))) :y (round (second (caddr p))))
			   (sdl:point :x (round (car (cadddr p))) :y (round (second (cadddr p))))
			   )
	  ;;:color sdl:*red*
	  )))))

(defun polygon (a &key (center '(0 0)) (radius 100) (n 3) (data-type 'float))
  (>> a 'points '())
  ;;(>> a 'pen "down")
  (goto a (car center) (second center) -90)
  (let (points '())
    (dotimes (i n)
      (fd a radius)
      (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
      (bk a radius)
      (rt a (/ 360 n)))
    (when (equal data-type 'int)
      (setf points (mapcar (lambda (p) (mapcar (lambda (i) (round i)) p)) points)))
    (>> a 'points points))
  (>> a 'points))
;;(polygon (make-turtle) :center '(0 0) :radius 100 :n 36 :data-type 'int)

(defun triangle (a &key (center '(0 0)) (radius 100) (data-type 'float))
  (polygon a :center center :radius radius :n 3 :data-type data-type))
;;(triangle (make-turtle) :center '(0 0) :radius 100 :data-type 'int)

(defun three-pointed-star (a &key (center '(0 0)))
  (>> a 'points '())
  ;;(>> a 'pen "down")
  (let ((longs '())(shorts '()))
    (goto a (car center) (second center) 90)
    (dotimes (i 3)
      (fd a 140)
      ;;(fd a 200)
      (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) longs)
      (bk a 140)
      ;;(bk a 200)
      (rt a 120))
    (goto a (car center) (second center) 150)
    (dotimes (i 3)
      (fd a 35)
      ;;(fd a 50)
      (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) shorts)
      (bk a 35)
      ;;(bk a 50)
      (rt a 120))
    (let ((points '()))
      (dotimes (i (length longs))
	(push (nth i longs) points)
	(push (nth i shorts) points))
      (>> a 'points points)))
  (>> a 'points))

(defun four-pointed-star (a &key (center '(0 0)))
  ;;(>> a 'pen "down")
  (let ((longs '())(shorts '()))
    (goto a (car center) (second center) 45)
    (dotimes (i 4)
      (fd a 140)
      ;;(fd a 200)
      (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) longs)
      (bk a 140)
      ;;(bk a 200)
      (rt a 90))
    (goto a (car center) (second center) 90)
    (dotimes (i 4)
      (fd a 40)
      ;;(fd a 60)
      (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) shorts)
      (bk a 40)
      ;;(bk a 60)
      (rt a 90))
    (let ((points '()))
      (dotimes (i (length longs))
	(push (nth i longs) points)
	(push (nth i shorts) points))
      (>> a 'points points)))
  (>> a 'points))

(defun square (a &key (center '(0 0)))
  ;;(>> a 'pen "down")
  (goto a (- (car center) 100) (+ (second center) 100) 0)
  ;;(goto a -250 -250 0)
  (let ((points '()))
    (dotimes (i 4)
      (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
      (fd a 200)
      ;;(fd a 500)
      (lt a 90))
    (>> a 'points points))
  (>> a 'points))

(defun square-tri (a &key (center '(0 0)))
  ;;(>> a 'pen "down")
  (goto a (- (car center) 100) (+ (second center) 100) 90)
  ;;(goto a -150 -150 90)
  (let (points '())
    (dotimes (i 3)
      (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
      (fd a 200)
      ;;(fd a 300)
      (rt a 90))
    (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
    (goto a (car center) (second center) 0)
    (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
    (>> a 'points points))  
  (>> a 'points))

(defun hourglass (a &key (center '(0 0)))
  ;;(>> a 'pen "down")
  (let ((points '()))
    (goto a (- (car center) 100) (- (second center) 100) 0)
    ;;(goto a -200 -200 0)
    (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
    (fd a 200)
    ;;(fd a 400)
    (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
    (goto a (car center) (second center) 0)
    (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
    (goto a (+ (car center) 100) (+ (second center) 100) 180)
    ;;(goto a 200 200 180)
    (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
    (fd a 200)
    ;;(fd a 400)
    (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
    (goto a (car center) (second center) 0)
    (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
    (>> a 'points points))
  (>> a 'points))

(defun square-intersec (a &key (center '(0 0)))
  ;;(>> a 'pen "down")
  (let ((points '()))
    (goto a (- (car center) 80) (- (second center) 80) 0)
    ;;(goto a -200 -200 0)
    (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
    (fd a 160)
    ;;(fd a 400)
    (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
    (goto a (- (car center) 80) (+ (second center) 80) 0)
    ;;(goto a -200 200 0)
    (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
    (fd a 160)
    ;;(fd a 400)
    (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
    (>> a 'points points))
  (>> a 'points))

(defun pentagon (a &key (center '(0 0)))
  ;;(>> a 'pen "down")
  (goto a (car center) (second center) 90)
  (fd a 150)
  ;;(fd a 200)
  (rt a 126)
  (let (points '())
    (dotimes (i 5)
      (fd a 150)
      ;;(fd a 300)
      (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
      (rt a 72))
    (>> a 'points points))
  (>> a 'points))

(defun five-pointed-star (a &key (center '(0 0)))
  ;;(>> a 'pen "down")
  (goto a (car center) (second center) 90)
  (fd a 100)
  ;;(fd a 300)
  (rt a 162)
  (let ((points '()))
    (dotimes (i 5)
      (fd a 150)
      ;;(fd a 400)
      (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
      (rt a 144))
    (>> a 'points points))
  (>> a 'points))

(defun five-pointed-star-shape (a &key (center '(0 0)))
  ;;(>> a 'pen "down")
  (goto a (car center) (second center) 90)
  (fd a 100)
  ;;(fd a 200)
  (rt a 162)
  (let ((points '()))
    (dotimes (i 10)
      (fd a 100)
      ;;(fd a 200)
      (push (list (round-float (>> a `(coord x)) 3) (round-float (>> a `(coord y)) 3)) points)
      (if (= 0 (mod i 2))
	(lt a 72)
	(rt a 144)))
    (>> a 'points points))
  (>> a 'points))

(defun test-turtle (&key (a (make-turtle)))
  ;;(goto a 0 0 90)
  (left a 45)
  (forward a 100)
  ;;(five-pointed-star-shape a)
  (hash2lst a))
;;(test-turtle)

